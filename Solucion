#include <iostream>
#include <cmath>
#include <cctype> // Para toupper

using namespace std;

// Definir la estructura de una nota(grade)
struct Grade
{
    int studentId;
    float grade;
};

// Función para leer las coordenadas de varias notas
void leerNotas(Grade notas[], int n)
{
    char respuesta;
    cout << "¿Desea ingresar las notas manualmente? (s/n): ";
    cin >> respuesta;
    respuesta = toupper(respuesta); // Convertir a mayúscula

    if (respuesta == 'S')
    {
        cout << "Ingrese " << n << " notas (id y calificación):\n";
        for (int i = 0; i < n; i++)
        {
            cout << "Estudiante " << i + 1 << " (id, nota): ";
            cin >> notas[i].studentId >> notas[i].grade;
            
            // Validar que la nota esté en el rango 0.0-5.0
            while (notas[i].grade < 0.0 || notas[i].grade > 5.0) {
                cout << "Error: La nota debe estar entre 0.0 y 5.0. Ingrese nuevamente: ";
                cin >> notas[i].grade;
            }
        }
    }
    else
    {
        cout << "Usando valores predeterminados...\n";
        // Valores predeterminados de ejemplo
        Grade valoresPredeterminados[] = {
            {1010, 3.5},
            {1020, 4.2},
            {1030, 2.8},
            {1040, 4.8},
            {1050, 3.9}
        };
        
        // Copiar valores predeterminados al arreglo
        for (int i = 0; i < n && i < 5; i++) {
            notas[i] = valoresPredeterminados[i];
        }
    }
}

// Función para calcular el promedio y encontrar la nota más alta
double calcularPromedio(Grade notas[], int n, int &indiceNotaMasAlta)
{
    double suma = 0.0;
    float notaMaxima = -1.0;
    indiceNotaMasAlta = -1;
    
    for (int i = 0; i < n; i++)
    {
        suma += notas[i].grade;
        
        // Encontrar la nota más alta
        if (notas[i].grade > notaMaxima) {
            notaMaxima = notas[i].grade;
            indiceNotaMasAlta = i;
        }
    }
    
    return (n > 0) ? suma / n : 0.0;
}

// Función para mostrar el promedio y estudiante con mayor nota
void mostrarResultado(Grade notas[], int indiceNotaMasAlta, double promedio)
{
    if (indiceNotaMasAlta >= 0) {
        cout << "\n=== RESULTADOS ===\n";
        cout << "El id del estudiante con mejor calificación es: " 
             << notas[indiceNotaMasAlta].studentId 
             << ", con una nota de: " << notas[indiceNotaMasAlta].grade << endl;
        cout << "La calificación promedio del arreglo es: " << promedio << endl;
    } else {
        cout << "No se encontraron notas válidas.\n";
    }
}

int main()
{
    int n;
    
    cout << "=== CALCULADORA DE PROMEDIO Y MEJOR NOTA ===\n";
    cout << "Ingrese el número de estudiantes (mínimo 2): ";
    cin >> n;

    if (n < 2)
    {
        cout << "Error: Se necesitan al menos 2 estudiantes para determinar el promedio.\n";
        return 1;
    }

    Grade *notas = new Grade[n]; // Arreglo dinámico para almacenar las notas

    // Leer las notas (manual o predeterminado)
    leerNotas(notas, n);

    // Calcular promedio y encontrar nota más alta
    int indiceNotaMasAlta;
    double promedio = calcularPromedio(notas, n, indiceNotaMasAlta);

    // Mostrar el resultado
    mostrarResultado(notas, indiceNotaMasAlta, promedio);

    // Liberar memoria
    delete[] notas;

    return 0;
}
